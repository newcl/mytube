# MyTube 🎬

> My first vibe coding project! A YouTube video downloader built with modern tech stack and lots of fun! 🚀

## What's This? 🤔

MyTube is a web application that helps you download YouTube videos using the powerful `yt-dlp` library. It's my first serious coding project where I actually had fun building something useful! 

Built with **Cursor** (the best AI coding assistant ever! 🤖), this project taught me so much about modern web development, containerization, and Kubernetes deployment.

## Architecture 🏗️

This bad boy has **3 main components**:

- **🎨 React Frontend** - A beautiful web interface where you can paste YouTube URLs and watch the magic happen
- **⚡ FastAPI Backend** - The brain that handles API requests and coordinates everything
- **🔄 Huey Worker Queue** - The unsung hero that handles the actual video downloading in the background

## Tech Stack 🛠️

- **Frontend**: React + TypeScript + Vite + Tailwind CSS
- **Backend**: FastAPI + Python + SQLAlchemy + Alembic
- **Queue**: Huey + Redis
- **Database**: PostgreSQL
- **Containerization**: Docker + Multi-stage builds
- **Orchestration**: Kubernetes + Helm
- **CI/CD**: Drone CI
- **Video Processing**: yt-dlp

## Features ✨

- 🎥 Download YouTube videos with custom quality settings
- 📱 Responsive web interface
- 🔄 Background processing with progress tracking
- 🗄️ Persistent storage for downloads
- 🐳 Ready for Kubernetes deployment
- 🚀 Automated CI/CD pipeline
- 📊 Download progress monitoring

## Quick Start 🏃‍♂️

### Local Development

```bash
# Clone the repo
git clone https://github.com/newcl/mytube.git
cd mytube

# Start with Docker Compose
docker-compose up -d
```

### Kubernetes Deployment

```bash
# Deploy to your cluster
helm install mytube ./k8s/mytube
```

## Project Structure 📁

```
mytube/
├── frontend/          # React app 🎨
├── backend/           # FastAPI app ⚡
├── k8s/              # Kubernetes manifests 🐳
├── .drone.yml        # CI/CD pipeline 🚀
└── README            # This file! 📖
```

## What I Learned 📚

This project was a fantastic learning experience! I got to play with:

- **Modern React patterns** with hooks and functional components
- **FastAPI** for building blazing-fast APIs
- **Background task processing** with Huey and Redis
- **Docker multi-stage builds** for optimized images
- **Kubernetes deployment** with Helm charts
- **CI/CD automation** with Drone CI
- **Database migrations** with Alembic

## Code Quality 😅

Let's be honest - this is my first serious project, so the code quality could definitely be improved! But hey, it works and I had a blast building it! 

Some areas for improvement:
- Better error handling
- More comprehensive tests
- Code documentation
- Performance optimizations
- Security hardening

## Built with Cursor 🤖

This entire project was built using **Cursor** - the AI-powered code editor that's like having a coding buddy who never gets tired! The AI suggestions, code completion, and debugging help made this project so much more enjoyable to build.

## Contributing 🤝

Feel free to contribute! This is a learning project, so any improvements, bug fixes, or feature suggestions are welcome. Just remember to be kind - we're all learning here! 😊

## License 📄

MIT License - feel free to use this code for your own projects!

---

**Happy coding! 🎉**

*Built with ❤️ and lots of ☕ during late-night coding sessions*
